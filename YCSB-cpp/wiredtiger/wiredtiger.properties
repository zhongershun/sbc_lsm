wiredtiger.home=/tmp/ycsb-wiredtiger
wiredtiger.format=single

# for detailed description, please see:
# https://source.wiredtiger.com/11.0.0/group__wt.html#gacbe8d118f978f5bfc8ccb4c77c9e8813 and,
# https://source.wiredtiger.com/11.0.0/struct_w_t___s_e_s_s_i_o_n.html#a358ca4141d59c345f401c58501276bbb


# Character | Meaning  | Change to value
# ----------+----------+-----------------
# B or b    | byte     | no change
# K or k    | kilobyte | multiply by 2^10
# M or m    | megabyte | multiply by 2^20
# G or g    | gigabyte | multiply by 2^30
# T or t    | terabyte | multiply by 2^40
# P or p    | petabyte | multiply by 2^50
#
# e.g.1 500B == 500
# e.g.2 4KB  == 4096

# maximum heap memory to allocate for BTree ONLY (including associated in-memory data structures)
wiredtiger.cache_size=64MB
# Use O_DIRECT on POSIX systems, and FILE_FLAG_NO_BUFFERING on Windows to access files.
wiredtiger.direct_io=[]
# if true, set a larger value for cache_size, or there may be an exception due to cache full.
wiredtiger.in_memory=false

# LSM Manager
# merge LSM chunks where possible.
wiredtiger.lsm_mgr.merge=true
# threads managing the LSM`
wiredtiger.lsm_mgr.max_workers=4


# Block Manager #
# the file unit allocation size, in bytes, must a power-of-two.
wiredtiger.blk_mgr.allocation_size=4KB
# the number of bits used per item for LSM bloom filters.
wiredtiger.blk_mgr.bloom_bit_count=16
# the number of hash values per item used for LSM bloom filters.
wiredtiger.blk_mgr.bloom_hash_count=8
# the maximum size a single chunk can be. Chunks larger than this size are not considered for further merges.
wiredtiger.blk_mgr.chunk_max=5GB
# the maximum size of the in-memory chunk of an LSM tree.
wiredtiger.blk_mgr.chunk_size=10MB
# snappy/lz4/zlib/zstd or empty
wiredtiger.blk_mgr.compressor=snappy


# BTree node
# the maximum page size for internal nodes, the limit is applied before any block compression is done.
# the size must be a multiple of the allocation size
wiredtiger.blk_mgr.btree.internal_page_max=4KB

# the largest key/value stored in a leaf node, in bytes. If set, keys larger than the specified size are stored as overflow items.
# default 0 means 1/10 the size of a newly split leaf page.
wiredtiger.blk_mgr.btree.leaf_key_max=0
# default 0 means 1/2 the size of a newly split leaf page.
wiredtiger.blk_mgr.btree.leaf_value_max=0

# the maximum page size for leaf nodes, in bytes; the size must be a multiple of the allocation size
wiredtiger.blk_mgr.btree.leaf_page_max=32KB